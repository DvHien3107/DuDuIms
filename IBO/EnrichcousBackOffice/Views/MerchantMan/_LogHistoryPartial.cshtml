@using EnrichcousBackOffice.ViewModel
@using EnrichcousBackOffice.Models
@using EnrichcousBackOffice.AppLB
@using EnrichcousBackOffice.Utils
@{
    var ListLogMerchant = ViewBag.ListLog as EnrichcousBackOffice.Models.CustomizeModel.DetailSalesLeadCustomizeModel;
    var access = EnrichcousBackOffice.AppLB.Authority.GetAccessAuthority();
    var cMem = EnrichcousBackOffice.AppLB.Authority.GetCurrentMember();
    WebDataModel db = new WebDataModel();
}
@functions{
    string FeaturesOfInterest(SaleLeadInfo lead)
    {
        string interest = "";
        if (lead.Features_Interes?.Contains("checkin") == true)
        {
            interest += "+ CHECKIN" + "<br/>";
        }
        if (lead.Features_Interes?.Contains("payroll") == true)
        {
            interest += "+ PAYROLL" + "<br/>";
        }
        if (lead.Features_Interes?.Contains("automation") == true)
        {
            interest += "+ AUTOMATION" + "<br/>";
        }
        if (lead.Features_Interes?.Contains("techmanagement") == true)
        {
            interest += "+ TECHMANAGEMENT" + "<br/>";
        }
        if (!string.IsNullOrEmpty(lead.Features_Interes_other))
        {
            interest += "+ OTHER:_" + lead.Features_Interes_other;
        }
        return interest;
    }

    string TimeView(string time)
    {
        if (string.IsNullOrEmpty(time))
        {
            return "";
        }
        var h = int.Parse(time.Substring(11, 2));
        var m = time.Substring(14, 2);
        var ap = "AM";
        if (h > 12)
        {
            ap = "PM";
            h = h - 12;
        }
        return $"{h}:{m} {ap}";
    }

    string FormatDateRemain(DateTime dt)
    {
        string time = dt > DateTime.UtcNow ? "later" : "ago";
        TimeSpan ts = dt > DateTime.UtcNow ? dt - DateTime.UtcNow : DateTime.UtcNow - dt;

        if (ts.Days == 0 && ts.Hours == 0 && ts.Minutes == 0)
        {
            return "a few seconds " + time;
        }
        else if (ts.Days == 0 && ts.Hours == 0)
        {
            return ts.Minutes + " minutes " + time;
        }
        else if (ts.Days == 0)
        {
            return ts.Hours + " hours " + ts.Minutes + " minutes " + time;
        }
        else if (ts.Days > 365)
        {
            return Math.Round((decimal)(ts.Days / 365), 0, MidpointRounding.ToEven).ToString() + " years " + time;
        }
        else if (ts.Days > 30)
        {
            return Math.Round((decimal)(ts.Days / 30), 0, MidpointRounding.ToEven).ToString() + " months " + time;
        }
        return ts.Days + " days " + time;// +ts.Hours + " hours " + ts.Minutes + " minutes ago";
    }
}

<div class="nav-tabs-custom custom-scroll" id="content-history" style="margin: auto; float: none; padding: 10px; height: 80vh; max-height: 80vh; overflow: auto; ">
    <div class="tab-content" style="border: 0px 1px 1px 1px solid #ddd;">
        <div class="active tab-pane" id="history_@ListLogMerchant.lead.SaleLeadId">
            <!-- The timeline -->
            @if (ListLogMerchant.even == null || !ListLogMerchant.even.Any())
            {
                <div class="col-md-12">
                    <div class="alert alert-warning">
                        <span><i class="icon fa fa-warning"></i> No data</span>
                    </div>
                </div>
            }
            else
            {
                <ul class="timeline timeline-inverse">
                    @{
                        string LastDaysinMonth = "";
                    }
                    @foreach (var itemd in ListLogMerchant.even.OrderByDescending(f => AppFunc.ParseTimeToUtc(f.StartEvent)))
                    {
                        string y = itemd.StartEvent.Substring(0, 4);
                        string m = itemd.StartEvent.Substring(5, 2);

                        <!-- timeline time label -->
                        if (y + m != LastDaysinMonth)
                        {
                            LastDaysinMonth = y + m;
                            <text>
                                <li class="time-label">
                                    <span class="bg-green">
                                        @AppFunc.ParseTimeToUtc(itemd.StartEvent).UtcToIMSDateTime().ToString("MMM dd, yyyy")
                                    </span>
                                </li>
                            </text>
                        }

                        string dateago = FormatDateRemain(AppFunc.ParseTimeToUtc(itemd.StartEvent));
                        <!-- timeline item -->
                        <li class="list-item-log">
                            <i class="fa fa-comments bg-yellow"></i>
                            <div class="timeline-item">
                                <div class="timeline-header">
                                    <table style="width:100%">
                                        <tr>
                                            <td>
                                                <h5 class="title-log" style="margin:0">
                                                    @Html.Raw(@itemd.Name)
                                                </h5>
                                            </td>
                                            <td style="text-align:right">
                                                <span style="color: #999;font-size:12px"><i class="fa fa-clock-o"></i>&nbsp;@dateago</span>

                                                @if (AppFunc.ParseTimeToUtc(itemd.StartEvent) <= DateTime.UtcNow && itemd.Done != 1 && itemd.Type == "Event")
                                                {
                                                    <text>
                                                        &nbsp; &nbsp; <img src="~/Content/Img/warning.gif" data-toggle="tooltip" title="Missed an appointment" style="width: 18px" alt="Not completed..." />
                                                    </text>

                                                }
                                                @if (ListLogMerchant.lead.NextAppointment != null && ListLogMerchant.lead.NextAppointment.Id == itemd.Id && itemd.Type == "Event")
                                                {
                                                    <text>
                                                        &nbsp; &nbsp;<img src="~/Content/Img/ringing-bell.gif" data-toggle="tooltip" title="The appointment is coming" style="width: 23px;" alt="Coming soon..." />
                                                    </text>
                                                }
                                                else if (AppFunc.ParseTimeToUtc(itemd.StartEvent) >= DateTime.UtcNow && itemd.Type == "Event" && itemd.Done != 1)
                                                {
                                                    <text>
                                                        &nbsp; &nbsp; <img src="~/Content/Img/lamp_blue.png" data-toggle="tooltip" title="Future appointment" style="width: 23px;" alt="Coming soon..." />
                                                    </text>
                                                }
                                                &nbsp;&nbsp;
                                                <a class="btn-xs @(itemd.Type == "Event" ? "btn-warning" :  itemd.Type == "Note" ? "btn-success" :"btn-primary")" id="iconpublish-@itemd.Id" style="margin-right:10px;color:white">
                                                    @Html.Raw(itemd.Type == "Event" ? "<i class='fa fa-handshake-o'></i> " : itemd.Type == "Note" ? "<i class='fa fa-sticky-note'></i> " : "<i class='fa fa-comment-o' aria-hidden='true'></i> ")&nbsp;@(itemd.Type == "Event" ? "Appoiment" : itemd.Type)
                                                </a>

                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="timeline-body timeline-@itemd.Id" style="max-width:100%; overflow-x:auto">
                                    <div class="noi-dung-log">
                                        @Html.Raw(itemd.Description?.Replace("\n", "<br/>"))
                                    </div>
                                    <br />
                                </div>
                                <div class="timeline-footer">
                                    <div style="display:flex">
                                        @if (itemd.CreateBy != "IMS System" && itemd.MemberNumber == cMem.MemberNumber)
                                        {
                                            <a class="btn btn-sm btn-warning btn-edit-log" onclick="@(itemd.Type == "Event" ? "edit_appointment" : "edit_log")('@itemd.SalesLeadId','@itemd.Id','img_@itemd.Id')" title="" data-toggle="tooltip" style="padding: 2px 7px; color: white;" data-original-title="Click to Edit">
                                                <i class="fa fa-edit"></i><span>&nbsp;Edit</span>
                                            </a>
                                        }

                                        <span style="display: block;margin-left: auto;color: #666;font-size:13px">
                                            <span class="entry-time"> @string.Format("{0:r}", AppFunc.ParseTimeToUtc(itemd.StartEvent).UtcToIMSDateTime().ToString("MMM dd, yyyy hh:mm tt"))</span>
                                            - by: <i>@(!string.IsNullOrEmpty(itemd.MemberNumber) ? (db.P_Member.FirstOrDefault(x => x.MemberNumber == itemd.MemberNumber)?.FullName??(!string.IsNullOrEmpty(itemd.CreateBy)? itemd.CreateBy:"POS System")) : (string.IsNullOrEmpty(itemd.LastUpdateBy) ? (!string.IsNullOrEmpty(itemd.CreateBy) ? itemd.CreateBy : "POS System") : itemd.LastUpdateBy))</i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                    <!-- END timeline item -->
                    <li>
                        <i class="fa fa-clock-o bg-gray"></i>
                    </li>
                </ul>
            }
        </div>
        <div class="tab-pane" id="infosaleslead_@ListLogMerchant.lead.SaleLeadId">
            <table class="table table-striped table-bordered">
                <tr>
                    <th class="col-md-3">Salon Name</th>
                    <td>@(ListLogMerchant.lead?.BusinessName)</td>
                </tr>
                <tr>
                    <th class="col-md-3">Salon Phone</th>
                    <td>@(ListLogMerchant.lead?.BusinessPhone)</td>
                </tr>
                <tr>
                    <th class="col-md-3">Salon Email</th>
                    <td>@(ListLogMerchant.lead?.BusinessEmail)</td>
                </tr>
                <tr>
                    <th class="col-md-3">Salon Address</th>
                    <td>@(ListLogMerchant.lead?.SalonAddress1), @(ListLogMerchant.lead?.SalonCity), @(ListLogMerchant.lead?.SalonState), @(ListLogMerchant.lead?.BusinessZipCode), @(ListLogMerchant.lead?.BusinessCountry)</td>
                </tr>
                <tr>
                    <th class="col-md-3">Contact Name</th>
                    <td>@(ListLogMerchant.lead?.ContactName)</td>
                </tr>
                <tr>
                    <th class="col-md-3">Contact Phone</th>
                    <td>@(ListLogMerchant.lead?.CellPhone)</td>
                </tr>
                <tr>
                    <th class="col-md-3">Contact Email</th>
                    <td>@(ListLogMerchant.lead?.Email)</td>
                </tr>
                <tr>
                    <th>Features Of Interest</th>
                    <td>
                        @Html.Raw(FeaturesOfInterest(ListLogMerchant.lead))
                    </td>
                </tr>
                <tr>
                    <th class="col-md-3">Sales Person</th>
                    <td>
                        @(ListLogMerchant.lead?.MemberName)
                        @if (!string.IsNullOrEmpty(ListLogMerchant.lead?.MemberNumber))
                        {
                            <a class="btn btn-primary" style="padding: 0px 5px; font-size: 12px; margin-left: 8px;" onclick="viewdetail('@(ListLogMerchant.lead?.MemberNumber)')"><i class="glyphicon glyphicon-search"></i> View</a>
                        }

                    </td>
                </tr>
                <tr>
                    <th class="col-md-3">Spa/Salon Information</th>
                    <td>
                        Number Of Branches : @(ListLogMerchant.lead?.MoreInfo?.NumberBranches) <br />
                        Number Of Employees : @(ListLogMerchant.lead?.MoreInfo?.NumberEmployees) <br />
                        Are Using Software :
                        @if (ListLogMerchant.lead?.MoreInfo?.AreUsingSoftware != null)
                        {<text>
                                @(ListLogMerchant.lead?.MoreInfo.AreUsingSoftware == "Yes" ? "Yes" : "No")
                        </text>
                    } <br />
                        Hardware :
                        @if (ListLogMerchant.lead?.MoreInfo?.Hardware != null)
                        {
                            <text>
                                @(ListLogMerchant.lead?.MoreInfo?.Hardware == "MANGO offers" ? "MANGO offers" : "Self-supply")
                            </text>
                        }
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <!-- /.tab-content -->
</div>


@*<script>
    $(".entry-time").html(function (index, value) {
        return moment(value).format("MMM DD YYYY, h:mm:ss A");
    });
</script>*@